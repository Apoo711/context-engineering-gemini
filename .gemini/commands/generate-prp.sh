#!/bin/bash

# ---
# generate-prp.sh
#
# Description:
#   This script generates a comprehensive Product Requirements Prompt (PRP)
#   by sending a feature request file to the Gemini API.
# ---

# 1. Validate Input & Environment
# --------------------------------
if [ -z "$GEMINI_API_KEY" ]; then
  echo "Error: GEMINI_API_KEY environment variable is not set."
  echo "Please get an API key from Google AI Studio and set it."
  exit 1
fi

if ! command -v jq &> /dev/null; then
    echo "Error: jq is not installed. Please install it to parse API responses."
    exit 1
fi

if [ -z "$1" ]; then
  echo "Error: No feature file specified."
  echo "Usage: $0 <path_to_feature_file>"
  exit 1
fi

FEATURE_FILE_PATH=$1
if [ ! -f "$FEATURE_FILE_PATH" ]; then
  echo "Error: File '$FEATURE_FILE_PATH' not found."
  exit 1
fi

# 2. Define Prompts and Configuration
# -----------------------------------
GENERATE_PRP_PROMPT=$(cat <<'END_PROMPT'
You are an expert-level AI software engineer. Your task is to generate a complete Product Requirements Prompt (PRP) based on the provided feature request.

Use the `.gemini/templates/prp_template.md` as a template for your response.

Your process should be:
1.  **Analyze the Feature Request**: Thoroughly understand the user's goal, the provided examples, and any other context.
2.  **Research**: Assume you have access to the entire codebase. Think about what existing patterns, files, and conventions should be followed. Mention these in the PRP.
3.  **Structure the PRP**: Fill out all sections of the template.
4.  **Final Output**: Your final output should be ONLY the completed PRP markdown content, ready to be saved to a file. Do not include any conversational text before or after the markdown.
END_PROMPT
)

FEATURE_REQUEST_CONTENT=$(cat "$FEATURE_FILE_PATH")

# 3. Prepare and Execute API Call
# -------------------------------
echo "✅ Preparing prompt for Gemini..."
echo "✅ Contacting the Gemini API... (This may take a moment)"

# Construct the JSON payload
JSON_PAYLOAD=$(jq -n \
                  --arg prompt "$GENERATE_PRP_PROMPT" \
                  --arg request "$FEATURE_REQUEST_CONTENT" \
                  '{ "contents": [ { "parts": [ { "text": "\($prompt)\n\nHere is the user_s feature request:\n---\n\($request)\n---" } ] } ] }')

# Make the API call using curl
API_RESPONSE=$(curl -s -X POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${GEMINI_API_KEY}" \
-H "Content-Type: application/json" \
-d "$JSON_PAYLOAD")

# 4. Parse the Response and Handle Errors
# ---------------------------------------
if [ -z "$API_RESPONSE" ]; then
    echo "Error: Received an empty response from the API."
    exit 1
fi

# Use jq to extract the text content.
# The 'r' flag outputs raw text without quotes.
PRP_CONTENT=$(echo "$API_RESPONSE" | jq -r '.candidates[0].content.parts[0].text')

if [ -z "$PRP_CONTENT" ] || [ "$PRP_CONTENT" == "null" ]; then
    echo "Error: Could not extract content from the API response."
    echo "Full API Response:"
    echo "$API_RESPONSE"
    exit 1
fi

# 5. Save the Output
# ------------------
mkdir -p PRPs

BASENAME=$(basename "$FEATURE_FILE_PATH" .md | tr '[:upper:]' '[:lower:]')
OUTPUT_FILE="PRPs/${BASENAME}_prp.md"

echo "$PRP_CONTENT" > "$OUTPUT_FILE"

echo "------------------------------------------------------------------"
echo "✅ Success! PRP generated by Gemini and saved to: $OUTPUT_FILE"
echo "------------------------------------------------------------------"
