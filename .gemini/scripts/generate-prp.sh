#!/bin/bash

# ---
# generate-prp.sh (v10 - Standardized on gemini-cli)
#
# Description:
#   Generates a PRP by piping a structured prompt to a gemini-cli tool.
# ---

# 1. Validate Input & Environment
# --------------------------------
if ! command -v gemini &> /dev/null; then
    echo "Error: gemini-cli is not installed or not in your PATH."
    echo "Please install it via npm: npm install -g @google/generative-ai-cli"
    exit 1
fi
# The gemini-cli tool is expected to use the GOOGLE_API_KEY env variable.

if [ -z "$1" ]; then
  echo "Error: No feature file specified."
  exit 1
fi

FEATURE_FILE_PATH=$1
TEMPLATE_FILE_PATH=".gemini/templates/prp_template.md"

if [ ! -f "$FEATURE_FILE_PATH" ]; then
  echo "Error: Feature file '$FEATURE_FILE_PATH' not found."
  exit 1
fi
if [ ! -f "$TEMPLATE_FILE_PATH" ]; then
  echo "Error: Template file '$TEMPLATE_FILE_PATH' not found."
  exit 1
fi

# 2. Define Prompts and Read Content
# -----------------------------------
GENERATE_PRP_PROMPT=$(cat <<'END_PROMPT'
You are an expert-level AI software engineer. Your task is to generate a complete Product Requirements Prompt (PRP) based on the provided user request.

**Your output MUST strictly follow the structure and use the exact headings from the template provided below.** Do not invent your own headings or sections. You must fill out every section of the template: `1. Overview`, `2. Success Criteria`, `3. Context & Resources`, `4. Implementation Blueprint`, and `5. Validation Plan`.

Your final output must be ONLY the completed PRP markdown content. Do not include any other text.
END_PROMPT
)

TEMPLATE_CONTENT=$(cat "$TEMPLATE_FILE_PATH")
FEATURE_REQUEST_CONTENT=$(cat "$FEATURE_FILE_PATH")

# 3. Prepare and Execute API Call via CLI
# ---------------------------------------
FULL_PROMPT=$(cat <<EOF
$GENERATE_PRP_PROMPT

--- TEMPLATE TO FOLLOW ---
$TEMPLATE_CONTENT

--- USER REQUEST ---
$FEATURE_REQUEST_CONTENT
EOF
)

echo "ðŸ¤– Piping prompt to gemini-cli to generate an implementation plan..."

# The gemini-cli tool reads the prompt from standard input.
# We use the 'generate-text' command and specify the model.
PRP_CONTENT=$(echo "$FULL_PROMPT" | gemini generate-text --model gemini-2.0-flash)

if [ -z "$PRP_CONTENT" ]; then
    echo "Error: Received an empty response from the gemini-cli."
    exit 1
fi

# 4. Save the Output
# ------------------
mkdir -p PRPs

BASENAME=$(basename "$FEATURE_FILE_PATH" .md | tr '[:upper:]' '[:lower:]')
OUTPUT_FILE="PRPs/${BASENAME}_prp.md"

echo "$PRP_CONTENT" > "$OUTPUT_FILE"

echo "------------------------------------------------------------------"
echo "âœ… Success! PRP generated by Gemini and saved to: $OUTPUT_FILE"
echo "------------------------------------------------------------------"
